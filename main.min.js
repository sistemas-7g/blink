function DrawingToolType(e, t, n, r) {
	this.name = e;
	this.color = t || "#000000";
	this.brushSize = n || 2;
	this.type = r || "painter"
}

function initBook() {
	viewer = $(".document-viewer").DocumentViewer(getUrlVars()["document"], url_documents, [.2, .5, 1]);
	$(".document-viewer .paper .image").dblclick(viewer.zoomNext);
	$(".bts .bt.zoom-in").click(viewer.zoomIn);
	$(".bts .bt.zoom-out").click(viewer.zoomOut);
	$(".bts .bt.zoom-reset").click(viewer.zoomReset);
	$(".document-viewer").on("click_mark", function(e, t) {
		console.log(e);
		console.log(t);
		$(".window .btn-close").each(function() {
			if ($(this).closest(".window").is(":visible")) $(this).click()
		});
		switch (t.type) {
			case "exercise":
				$(".window.exercise").fadeIn();
				$(".window.exercise iframe").remove();
				$(".window.exercise").append('<iframe style="display:none;" frameborder="0" scrolling="no" id="exercise-iframe" src="' + (url_documents + t.src) + '"></iframe>');
				$(".window.exercise").css("height", "100px");
				$(".window.exercise").append('<div class="loading">Loading...</div>');
				$(".window.exercise iframe").load(function() {
					$(".window.exercise iframe").fadeIn();
					$(".window.exercise .loading").remove()
				});
				break;
			case "audio":
				$(".window.audio-player").fadeIn();
				$("jp_container_1").remove();
				$(".window.audio-player").append($("#audio-tmpl").html());
				initAudio(url_documents + t.src);
				break
		}
	});
	$(".window").draggable({
		cursor: "move",
		cancel: ".btn-close"
	});
	//7097 & 7100
	$(".window").css({
		cursor: "pointer"
	});
	//7097 & 7100
	$(".window .btn-close").off("touchstart click").on("touchstart click", function() {
		$(this).closest(".window").hide();
		try {
			$("#jquery_jplayer_1").jPlayer("stop");
			$(".window.exercise iframe").remove();
			$("#jp_container_1").remove();
		} catch (e){
			//alert(e);
		}
	})
}

function iResize(e, t) {
	$(".window.exercise iframe").css({
		width: e + "px",
		height: t + "px",
		margin: "0 auto"
	});
	var n = $(window).width() / 2 - (e + 40) / 2;
	var r = $(window).height() / 2 - t / 2;
	if (r < 20) r = 20;
	$(".window.exercise").css({
		width: e + 40 + "px",
		height: t + 50 + "px",
		top: r + "px",
		left: n + "px",
		"margin-left": "0px",
		"margin-top": "0px"
	})
}

function getUrlVars() {
	var e = {};
	var t = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(t, n, r) {
		e[n] = r
	});
	return e
}

function initVideo(e, t, n) {
	var modeSO = "window";
	var solution = "html";
	var location = window.location.host.indexOf("localhost");
	// if (location != -1 && (navigator.appVersion.indexOf("Linux") != -1 || navigator.appVersion.indexOf("X11") != -1 || navigator.appVersion.indexOf("Windows") != -1) && navigator.appVersion.indexOf("Android") == -1) solution = "flash,html";
	// if (location != -1 && (navigator.appVersion.indexOf("Linux") != -1 || navigator.appVersion.indexOf("X11") != -1 || navigator.appVersion.indexOf("Windows") != -1) && navigator.appVersion.indexOf("Android") == -1) modeSO = "opaque";
	t = t > 0 ? t.toString() + "px" : "880px";
	n = n > 0 ? n.toString() + "px" : "495px";
	var e = e.substring(0, e.length - 4);
	if (navigator.appVersion.indexOf("Android") == -1 && window.location.host.indexOf("localhost") != -1) {
		this.useFlash = true;
		// solution = "flash,html";
	}
	//7098
	var mySelectors = {
        mute: '.jp-mute',
        unmute: '.jp-unmute'
    };
    if (navigator.userAgent.indexOf("Android") != -1) mySelectors = {
        mute: '.dm-mute',
        unmute: '.dm-unmute'
    };

	$("#jquery_jplayer_1").jPlayer({
		ready: function() {
			$(this).jPlayer("setMedia", {
				m4v: e + ".mp4",
				ogv: e + ".ogv"
			});
			Subtitles.init($(".srt"));
			Subtitles.subtitleElement.toggle();
			$("#jp_container_1").css("width", t);
			$(".jp-subtitles").click(function() {
				$(this).addClass("jp-subtitles-active");
				Subtitles.subtitleElement.toggle()
			});
			$(".jp-stop").click(function() {
				// $(".jp-subtitles").removeClass("jp-subtitles-active");
				// Subtitles.subtitleElement.toggle()
				Subtitles.init($(".srt"));
			});
			if (navigator.appVersion.indexOf("Android") == -1) {
				$(this).jPlayer("play", 0);
			}
			//7734
			$("#volume_slidejs_bar").simpleSlider();
			$("#volume_slidejs_bar").bind("slider:ready slider:changed", function(e, t) {
				$(".jp-jplayer").jPlayer("volume", t.value.toFixed(3))
			});

			$("#progress_slidejs_bar").simpleSlider();
			$("#progress_slidejs_bar").bind("slider:ready slider:changed", function(e, t) {
				$(".jp-jplayer").jPlayer("playHead", t.value.toFixed(2) * 100)
			});

			$("#jquery_jplayer_1").bind($.jPlayer.event.ended, function() {
				$(this).jPlayer("stop")
			})
		},
		swfPath: "js",
		solution: "flash, html",
		supplied: "m4v,ogv",
		useStateClassSkin: true,
        smoothPlayBar: true,
        keyEnabled: true,
		cssSelector: mySelectors,
		size: {
			width: t,
			height: n,
			cssClass: "jp-video-360p"
		},
		timeupdate: function(e) {
			Subtitles.printSubtitle(e.jPlayer.status.currentTime);
			$("#progress_slidejs_bar-slider .dragger").css("left", parseInt(e.jPlayer.status.currentPercentAbsolute, 10) + "%");
			$("#progress_slidejs_bar-slider .highlight-track").css("width", parseInt(e.jPlayer.status.currentPercentAbsolute, 10) + "%")
			if (e.jPlayer.status.currentPercentAbsolute === 0) {
				$("#jp-duration").text('00:00');
			}
		}
	}).bind($.jPlayer.event.play, function() { // pause other instances of player when current one play
		$(this).jPlayer("pauseOthers");
	});
	//7097 & 7100
	if (navigator.userAgent.indexOf("Android") != -1) {
          if (parseFloat(getAndroidVersion()) < 4.4) //"4.2.1"
          {
            $(".jp-full-screen").css("visibility", "hidden");
          }
        }
        if (location != -1 && (navigator.appVersion.indexOf("Linux") != -1 || navigator.appVersion.indexOf("X11") != -1)) $(".jp-full-screen").css("visibility", "hidden");
        // Fix android volume
	//7097 & 7100
        if (navigator.userAgent.indexOf("Android") != -1) {
          $(".jp-mute").unbind().on('touchstart', function(event) {
            event.preventDefault();
            event.stopPropagation();
            if (event.type == "touchstart") {
              $("#jquery_jplayer_1").jPlayer("mute");
            } else if (event.type == "click") {
              $("#jquery_jplayer_1").jPlayer("mute");
            }
            $(".jp-mute").blur();
            $(".jp-mute").hide();
            $(".jp-unmute").show();
          });
          $(".jp-unmute").unbind().on('touchstart', function(event) {
            event.preventDefault();
            event.stopPropagation();
            if (event.type == "touchstart") {
              $("#jquery_jplayer_1").jPlayer("unmute");
            } else if (event.type == "click") {
              $("#jquery_jplayer_1").jPlayer("unmute");
            }
            $(".jp-unmute").blur();
            $(".jp-unmute").hide();
            $(".jp-mute").show();
          });
        }

        function getAndroidVersion(ua) {
          ua = (ua || navigator.userAgent).toLowerCase();
          var match = ua.match(/android\s([0-9\.]*)/);
          return match ? match[1] : false;
        };
}

function initAudio(e) {
	var e = e.substring(0, e.length - 4);
	$(".window.audio-player").css("top", "45px");
	//7097 & 7100
	var mySelectors = {
        mute: '.jp-mute',
        unmute: '.jp-unmute'
      };
    if (navigator.userAgent.indexOf("Android") != -1) mySelectors = {
        mute: '.dm-mute',
        unmute: '.dm-unmute'
    };
	
	// 8054
	var isFfOnLinux = false;
	if( navigator.userAgent.indexOf("Mozilla") != -1 && navigator.userAgent.indexOf("Ubuntu") != -1 ){
		isFfOnLinux = true;
	}
	// alert("isFfOnLinux: " + isFfOnLinux + " Solution: " + ( isFfOnLinux ? "flash":"html, flash" ));	

	$("#jquery_jplayer_1").jPlayer({
		ready: function() {
			$(this).jPlayer("setMedia", {
				mp3: e + ".mp3",
				ogg: e + ".ogg"
			});
			$(".jp-right-controls").css("width", "120px");

			//8299
			var isIOSdevice = navigator.userAgent.toLowerCase()
          						.search(/iphone|ipod|ipad/) > -1 ? true : false;
          	var isIOS9 = navigator.userAgent.toLowerCase()
          						.search(/os 9_/) > -1 ? true : false;
			if (isIOSdevice && isIOS9){
				$(".jp-right-controls").hide();
				$(".jp-center-controls").css("width", "99%");
			}
			

			if (navigator.appVersion.indexOf("Android") == -1 && navigator.appVersion.indexOf("iPad") == -1) {
				$(this).jPlayer("play", 0);
			}
			//7734
			
			$("#volume_slidejs_bar").simpleSlider();
			$("#volume_slidejs_bar").bind("slider:ready slider:changed", function(e, t) {
				$(".jp-jplayer").jPlayer("volume", t.value.toFixed(3))
			});
			
			$("#progress_slidejs_bar").simpleSlider();
			$("#progress_slidejs_bar").bind("slider:ready slider:changed", function(e, t) {
				if(t.value){//8299
					$(".jp-jplayer").jPlayer("playHead", t.value.toFixed(2) * 100)
				}
			});
		},
		swfPath: "js",
		solution: ( isFfOnLinux ? "flash":"html, flash" ),
		supplied: "ogg,mp3",
		cssSelector: mySelectors,
		size: {
			cssClass: "jp-audio-420p"
		},
		timeupdate: function(e) {
			$("#progress_slidejs_bar-slider .dragger").css("left", parseInt(e.jPlayer.status.currentPercentAbsolute, 10) + "%");
			$("#progress_slidejs_bar-slider .highlight-track").css("width", parseInt(e.jPlayer.status.currentPercentAbsolute, 10) + "%")
			if (e.jPlayer.status.currentPercentAbsolute === 0 && navigator.appVersion.indexOf("Android") != -1) {
				$("#jp-duration").text('00:00');
			}
		}
	}).bind($.jPlayer.event.play, function() { // pause other instances of player when current one play
        $(this).jPlayer("pauseOthers");
    });

	function getAndroidVersion(ua) {
        ua = (ua || navigator.userAgent).toLowerCase();
        var match = ua.match(/android\s([0-9\.]*)/);
        return match ? match[1] : false;
      };
      // Fix android controls and volume
      //7097 & 7100
      if (navigator.userAgent.indexOf("Android") != -1) {
        // if (parseFloat(getAndroidVersion()) < 4.3 && parseFloat(getAndroidVersion()) >= 4.2) //"4.2.1"
        // {
        $(".jp-play").unbind().click(function(event) {
          event.preventDefault();
        });
        $(".jp-pause").unbind().click(function(event) {
          event.preventDefault();
        });
        $(".jp-play").unbind().on('touchstart', function(event) {
          event.preventDefault();
          event.stopPropagation();
          if (event.type == "touchstart") {
            $("#jquery_jplayer_1").jPlayer("play");
          } else if (event.type == "click") {
            $("#jquery_jplayer_1").jPlayer("play");
          }
          $(".jp-play").blur();
        });
        $(".jp-pause").unbind().on('touchstart', function(event) {
          event.preventDefault();
          event.stopPropagation();
          if (event.type == "touchstart") {
            $("#jquery_jplayer_1").jPlayer("pause");
          } else if (event.type == "click") {
            $("#jquery_jplayer_1").jPlayer("pause");
          }
          $(".jp-pause").blur();
        });
	//7097 & 7100
        $(".jp-stop").unbind().on('touchstart', function(event) {
          event.preventDefault();
          event.stopPropagation();
          if (event.type == "touchstart") {
            $("#jquery_jplayer_1").jPlayer("stop");
          } else if (event.type == "click") {
            $("#jquery_jplayer_1").jPlayer("stop");
          }
          $(".jp-stop").blur();
        });
	//7097 & 7100
        $(".jp-mute").unbind().on('touchstart', function(event) {
          event.preventDefault();
          event.stopPropagation();
          if (event.type == "touchstart") {
            $("#jquery_jplayer_1").jPlayer("mute");
          } else if (event.type == "click") {
            $("#jquery_jplayer_1").jPlayer("mute");
          }
          $(".jp-mute").blur();
          $(".jp-mute").hide();
          $(".jp-unmute").show();
        });
        $(".jp-unmute").unbind().on('touchstart', function(event) {
          event.preventDefault();
          event.stopPropagation();
          if (event.type == "touchstart") {
            $("#jquery_jplayer_1").jPlayer("unmute");
          } else if (event.type == "click") {
            $("#jquery_jplayer_1").jPlayer("unmute");
          }
          $(".jp-unmute").blur();
          $(".jp-unmute").hide();
          $(".jp-mute").show();
        });
        // }
      }
}

function appGoto(e) {
	if (e == "#") return;
	setLocationHash(getPage(e).hash)
}

function getPage(e) {
	var t = xdata.pages.length;
	for (var n = 0; n < t; n++)
		if (xdata.pages[n].id == e) return xdata.pages[n];
	return false
}

function resolveHash(e) {
	var t = e;
	if (t.indexOf("?") != -1) t = e.split("?")[0];
	var n = xdata.pages.length;
	for (var r = 0; r < n; r++)
		if (xdata.pages[r].hash == t) return xdata.pages[r];
	return false
}

function getLocationHash() {
	return window.location.hash.substring(1)
}

function setLocationHash(e) {
	window.location.hash = e;
	resources_section_style(e)
}

function saveLastPageVisited(e) {
	if (e === "splash-screen" || e === "") return;
	var t = levelId + "_lastPageVisited =" + e;
	document.cookie = t
}

function gotoLastPageVisited() {
	var e = levelId + "_lastPageVisited";
	var t = getCookieses(e);
	console.log("loaded coockie: ", t);
	if (t === undefined || t === null) t = "main-menu";
	setLocationHash(t)
}

function initTemplate(e) {
	if (currentTemplate != e) onChangeTemplate(currentTemplate);
	currentTemplate = e;
	menuController.closeAllLayers();
	checkMainMenuBg(e);
	$("#bg-holder-canvas").remove();
	$(".hoja_ivy_animate").remove();
	$("#bg-holder #mainbg").css("background", "");
	switch (e) {
		case "splash-screen":
			splashScreenReady();
			break;
		case "main-menu":
			setContainerLinks($("#page-content").find("a"));
			if ($("#db-links").hasClass("drawing-tool-disabled") != true && $("#db-links").length != 0) paintMarkers(user_data.get("objectLink"));
			break;
		case "unit-menu":
			setContainerLinks($("#page-content").find("a"));
			if ($("#db-links").hasClass("drawing-tool-disabled") != true && $("#db-links").length != 0) paintMarkers(user_data.get("objectLink"));
			break;
		case "lesson-menu":
			mmAnimation.removeAudio();
			setTimeout(function() {
				mmAnimation.removeAudio();
			}, 500);
			lessonMenuReady();
			lmAnimation.init();
			if ($("#db-links").hasClass("drawing-tool-disabled") != true && $("#db-links").length != 0) paintMarkers(user_data.get("objectLink"));
			break;
		case "resources-menu":
			mmAnimation.removeAudio();
			setTimeout(function() {
				mmAnimation.removeAudio();
			}, 500);
			setContainerLinks($("#page-content").find("a"));
			resourcesMenuReady();
			if ($("#db-links").hasClass("drawing-tool-disabled") !=
				true && $("#db-links").length != 0) paintMarkers(user_data.get("objectLink"));
			break;
		case "my-resources-menu":
			setContainerLinks($("#page-content").find("a"));
			resourcesMenuReady();
			initMyResources();
			break;
		case "resources-unit":
			mmAnimation.removeAudio();
			setTimeout(function() {
				mmAnimation.removeAudio();
			}, 500);
			setContainerLinks($("#page-content").find("a"));
			lmAnimation.init();
			if ($("#db-links").hasClass("drawing-tool-disabled") != true && $("#db-links").length != 0) paintMarkers(user_data.get("objectLink"));
			break;
		case "resources-links":
			mmAnimation.removeAudio();
			setTimeout(function() {
				mmAnimation.removeAudio();
			}, 500);
			resourcesLinksReady();
			lmAnimation.init();
			if ($("#db-links").hasClass("drawing-tool-disabled") !=
				true && $("#db-links").length != 0) paintMarkers(user_data.get("objectLink"));
			break;
		case "book-container":
			mmAnimation.removeAudio();
			setTimeout(function() {
				mmAnimation.removeAudio();
			}, 500);
			initBook();
			break;
		default:
			setContainerLinks($("#page-content").find("a"));
			break
	}
	if ($("#menu-right-container").length > 0) menuController.initMenuButtonsHandler()
}

function onChangeTemplate(e) {
	switch (e) {
		case "main-menu":
			window.removeEventListener("resize", scalableBackground);
			break;
		case "unit-menu":
			window.removeEventListener("resize", scalableBackground);
			break
	}
}

function resourcesMenuReady() {}

function resourcesLinksReady() {
	$(".resource-box a").click(function() {
		if ($(this).attr("href") != "empty") {
			var e = JSON.parse($(this).attr("obj"));
			if (e._type != "audio" && e._type != "pdf") {
				var t = "";
				if (e._currentUnit !== undefined) {
					var n = Handlebars.compile($("#current-unit-tmpl").html());
					t = n(e._currentUnit)
				}
				$("#p05-current-screen").html(t);
				var r = "";
				if (e._currentLesson !== undefined) {
					var i = Handlebars.compile($("#current-lesson-tmpl").html());
					r = i(e._currentLesson)
				}
				$("#p05-current-unit").html(r);
				setContainerLinks($("#p05-header-info a"))
			}
			loadMedia(e._type,
				e)
		}
		return false
	});
	setContainerLinks($("#p05-header-info a"))
}

function scalableBackground(e) {
	$("#mainbg").css("height", "100%")
}

function initMyResources() {}

function setBg(e) {
	$("body").removeClass().addClass(e);
	if (e == "green-bg") {
		$("#bg-holder-canvas").hide();
		$("#stage-canvas").hide()
	} else {
		$("#bg-holder-canvas").show();
		$("#stage-canvas").show();
		$("#menu-tab-container").show();
		$("#p05-resource-boxes").show();
		$(".hoja_ivy_animate").show()
	}
}

function resources_section_style(e) {
	var t = new Array;
	t = e.split("/");
	if (t.length > 0) {
		$("#maincontainer").removeAttr("class");
		$("#maincontainer").addClass(t[0])
	}
}

function closeGame() {
	mediaModal.holder.html("");
	onCloseGame();
	window.history.back();
	return false
}

function getUrlVars() {
	var e = {};
	var t = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(t, n, r) {
		e[n] = r
	});
	return e
}

function checkMainMenuBg(e) {
	if (e == "main-menu") {
		if ($(".parallax-holder").length == 0) {
			$("#mainbg").html($("#parallax-bg-ptl").html());
			mmAnimation.init()
		}
		mmAnimation.translateBg(0)
	} else if (e == "unit-menu") {
		if ($(".parallax-holder").length == 0) {
			$("#mainbg").html($("#parallax-bg-ptl").html());
			mmAnimation.init()
		}
		mmAnimation.translateBg(1)
	} else {
		if ($(".parallax-holder").length > 0) {
			mmAnimation.endAnimation();
			$("#mainbg").html("")
		}
		$(".parallax-holder").css("visibility", "hidden")
	}
}

function setContainerLinks(e) {
	e.click(function(e) {
		var t = $(this).attr("href");
		if (t != "#" || t != "") appGoto(t);
		e.preventDefault()
	})
}

function loadMedia(e, t) {
	var n = "";
	checkMediaModal();
	switch (e) {
		case "book":
			if (t._document == "" || t._document == undefined) return;
			n = "book-page?document=" + t._document;
			setLocationHash(n);
			break;
		case "game":
			setLocationHash("media-loaded");
			if (t._url == "" || t._url == undefined) return;
			mediaModal = new Modal($("#rooftops-media-modal"), "media-modal");
			mediaModal.addContent(t, "iframe");
			setBg("green-bg");
			$("#menu-tab-container").css("visibility", "hidden");
			$("#p05-resource-boxes").css("visibility", "hidden");
			var r = ($(window).height() -
				$("#media-modal").height()) / 2;
			break;
		case "video":
			setLocationHash("media-loaded");
			if (t._url == "" || t._url == undefined) return;
			mediaModal = new Modal($("#rooftops-media-modal"), "media-modal");
			mediaModal.addContent(t, "video");
			$(mediaModal).bind("onCloseModal", onMediaClosed);
			setBg("green-bg");
			$("#menu-tab-container").hide();
			$("#p05-resource-boxes").hide();
			break;
		case "audio":
			setLocationHash("media-loaded");
			if (t._url == "" || t._url == undefined) return;
			mediaModal = new Modal($("#rooftops-media-modal"), "media-modal");
			mediaModal.addContent(t, "audio");
			break;
		case "pdf":
			window.open(t._url);
			break
	}
}

function onMediaClosed(e) {
	$(mediaModal).unbind("onCloseModal", onMediaClosed);
	window.history.back()
}

function setLessonInResources(e) {
	if (e == "") {
		$("#p05-current-unit a img").show();
		$("#item_lozange_1").remove()
	} else if ($("#p05-current-unit").length == 0) {
		var t = "";
		t += '<div id="p05-current-unit">';
		t += '\t<a class="p05-item-nav close_return" href="#">';
		t += '\t\t<div class="lozengue1" id="item_lozange_1" style="float: right; width: 224px;">';
		t += '\t\t\t<p class="unit-lozengue" style="padding-top: 12px; text-align: center;">' + e + "</p>";
		t += "\t\t</div>";
		t += "\t</a>";
		t += "</div>";
		$("#p05-current-screen").after(t);
		$(".close_return").unbind("click").click(function(e) {
			e.preventDefault();
			$(".modal-btn-close").click()
		})
	} else {
		$("#p05-current-unit a img").hide();
		$("#p05-current-unit a").append('<div class="lozengue1" id="item_lozange_1" style="float: right; width: 224px;"> <p class="unit-lozengue" style="padding-top: 12px; text-align: center;">' + e + "</p> </div>")
	}
}

function setUnitInResources() {
	var e = $("#p05-current-unit .p05-item-nav").clone();
	$("#p05-current-screen").html(e);
	window.addEventListener("hashchange", onCloseUnitResource)
}

function onCloseUnitResource(e) {
	if (getLocationHash() != "media-loaded") window.removeEventListener("hashchange", onCloseUnitResource)
}

function checkMediaModal() {
	if (mediaModal != undefined)
		if (mediaModal.instance != null) mediaModal.closeModal()
}

function onCloseGame() {
	$("#menu-tab-container").css("visibility", "visible");
	$("#p05-resource-boxes").css("visibility", "visible");
	setBg("p04bg");
	setLessonInResources("")
}

function showPageHandler(e) {
	if (e) {
		var t = '<div id="book-click-icon-holder"><img src="sources/img/page_click.png" alt="book page"/></div>';
		$(".media-link").append(t)
	} else $(".media-link")
}

function getCookieses(e) {
	var t = e + "=";
	var n = document.cookie.split(";");
	for (var r = 0; r < n.length; r++) {
		var i = n[r];
		while (i.charAt(0) == " ") i = i.substring(1, i.length);
		if (i.indexOf(t) == 0) return i.substring(t.length, i.length)
	}
	return null
}

function deleteAllCookies() {
	var e = document.cookie.split(";");
	for (var t = 0; t < e.length; t++) {
		var n = e[t];
		var r = n.indexOf("=");
		var i = r > -1 ? n.substr(0, r) : n;
		document.cookie = i + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT"
	}
}

function paintMarkers(e) {
	var t = e.split("||*||");
	t.length = t.length - 1;
	$.each(t, function(t, n) {
		var r = n.split("||");
		$("#page-content").append("<div class='marker-button' id='" + r[0] + "' data-link='" + r[1] + "' style='left:" + r[2] + "px; top:" + r[3] + ";' ><span class='marker-move' ><img src='sources/img/xpix.png' alt='marker'/></span><a href='#' class='marker-btn' data-link='" + r[1] + "'><img src='sources/img/xpix.png' alt='marker'/></a><a href='#' class='marker-delete' ><img src='sources/img/xpix.png' alt='marker'/></a></div>");
		$(".marker-button#" + r[0]).draggable({
			cursor: "move",
			start: function(t, n) {
				nameLink = $(this).attr("id");
				urlLink = $(this).data("link");
				objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
				e = e.replace(objectLink, "")
			},
			stop: function(t, n) {
				objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
				e += objectLink;
				user_data.put("objectLink", e)
			}
		});
		$(".marker-delete").click(function(e,
			t) {
			nameLink = $(this).parent(".marker-button").attr("id");
			return menuController.hideColorBar(), menuController.utilModal = new Modal($("#rooftops-util-modal"), "util-modal"), menuController.utilModal.addContent({}, "delete"), !1
		});
		$(".marker-btn").click(function(e, t) {
			nameLink = $(this).parent(".marker-button").attr("id");
			urlLink = $(this).data("link");
			objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
			return menuController.hideColorBar(),
				menuController.utilModal = new Modal($("#rooftops-util-modal"), "util-modal"), menuController.utilModal.addContent({}, "open"), !1
		})
	})
}
var DrawingApp = {
	containerName: "drawing-tools-app",
	canvasName: "drawing-app-canvas",
	toolSet: new Array,
	currentToolId: 0,
	canvas: "",
	canvasHolderName: "drawing-app-canvas-holder",
	ctx: "",
	_enabled: "",
	init: function() {
		if (this.isOnStage()) return;
		this.canvas = this.createCanvas();
		this.ctx = this.canvas.getContext("2d");
		this.createCanvasEvents(true);
		$("#drawing-app-canvas-holder").css('height', $("#drawing-app-canvas").height());
	},
	isOnStage: function() {
		if (document.getElementById(this.containerName).hasChildNodes()) return true;
		return false
	},
	createTool: function(e) {
		var t = false;
		var n = this.toolSet.length;
		for (var r = 0; r < n; r++)
			if (this.toolSet[r].name == e.name) t = true;
		if (!t) this.toolSet.push(e)
	},
	setCurrentTool: function(e) {
		if (!DrawingApp._enabled) DrawingApp.createCanvasEvents(true);
		var t = this.toolSet.length;
		for (var n = 0; n < t; n++)
			if (this.toolSet[n].name == e) this.currentToolId = n
	},
	handleClick: function(e) {
		var t = e.srcElement || e.target;
		t.removeEventListener("mousemove", DrawingApp.handleMove)
	},
	handlePress: function(e) {
		e.preventDefault();
		DrawingApp.canvas.style.zIndex = 98;
		var t = {
			x: e.pageX || e.touches[0].pageX,
			y: e.pageY ||
				e.touches[0].pageY
		};
		var n = t.x - this.offsetLeft;
		var r = t.y - this.offsetTop;
		var i = DrawingApp.canvas.getContext("2d");
		var s = DrawingApp.toolSet[DrawingApp.currentToolId];
		i.beginPath();
		i.lineWidth = s.brushSize;
		if ($(".color-sel").css("background-color") == "rgb(0, 0, 0)") i.strokeStyle = $(".color-sel").css("background-color");
		else if (s.name == "marker") {
			var o = $(".color-sel").css("background-color");
			var u = o.lastIndexOf(")");
			newColor = o.slice(0, u) + ", 0.03)";
			newColor = "rgba" + newColor.slice(3, newColor.length);
			i.strokeStyle =
				newColor
		} else i.strokeStyle = $(".color-sel").css("background-color");
		if (s.type == "eraser") i.globalCompositeOperation = "destination-out";
		i.moveTo(n, r);
		var a = e.srcElement || e.target;
		a.addEventListener("mousemove", DrawingApp.handleMove);
		a.addEventListener("touchmove", DrawingApp.handleMove)
	},
	handleMove: function(e) {
		var t = {
			x: e.pageX || e.touches[0].pageX,
			y: e.pageY || e.touches[0].pageY
		};
		DrawingApp.paint(t.x - this.offsetLeft, t.y - this.offsetTop)
	},
	paint: function(e, t) {
		var n = DrawingApp.canvas.getContext("2d");
		n.lineTo(e,
			t);
		if (this.toolSet[this.currentToolId].type == "eraser") n.globalCompositeOperation = "destination-out";
		else n.globalCompositeOperation = "source-over";
		n.stroke()
	},
	createCanvas: function() {
		var e = document.createElement("div");
		e.id = this.canvasHolderName;
		var t = document.createElement("canvas");
		t.id = this.canvasName;
		e.width = $("body").width();
		t.width = $("body").width();
		if(document.body.scrollHeight != undefined)
		{
			e.height = document.body.scrollHeight;
			t.height = document.body.scrollHeight;	
		} else {
			e.height = $("body").height();
			t.height = $("body").height();
		}
		document.getElementById(this.containerName).appendChild(e);
		e.appendChild(t);
		return t
	},
	removeCanvas: function() {
		if (!this.isOnStage()) return;
		var e =
			document.getElementById(DrawingApp.containerName);
		e.removeChild(e.childNodes[0])
	},
	eraseAll: function() {
		if (!this.isOnStage()) return;
		this.canvas.width = 0;
		this.canvas.width = 1800
	},
	createCanvasEvents: function(e) {
		this._enabled = e;
		if (e) {
			DrawingApp.canvas.addEventListener("click", this.handleClick);
			DrawingApp.canvas.addEventListener("mousedown", this.handlePress);
			DrawingApp.canvas.addEventListener("touchstart", this.handlePress);
			DrawingApp.canvas.addEventListener("mouseleave", this.handleClick);
			DrawingApp.canvas.addEventListener("touchend",
				this.handleClick);
			DrawingApp.canvas.style.pointerEvents = "all";
			DrawingApp.canvas.style.zIndex = 98
		} else {
			DrawingApp.canvas.removeEventListener("click", this.handleClick);
			DrawingApp.canvas.removeEventListener("mouseleave", this.handleClick);
			DrawingApp.canvas.removeEventListener("touchend", this.handleClick);
			DrawingApp.canvas.removeEventListener("mousedown", this.handlePress);
			DrawingApp.canvas.removeEventListener("touchstart", this.handlePress);
			DrawingApp.canvas.style.pointerEvents = "none";
			DrawingApp.canvas.style.zIndex = -1
		}
	}
};
var BlindShapeWindow = {
	windowContainer: "",
	windowHolder: "",
	windowHolderName: "blind-shape-window-tool",
	init: function(e) {
		console.log("init!");
		if (this.isOnStage()) return;
		this.windowContainer = e;
		this.windowHolder = this.createBlindWindow()
	},
	isOnStage: function() {
		if (BlindShapeWindow.windowHolder != "") return true;
		return false
	},
	createBlindWindow: function() {
		var e = $('<div id="' + this.windowHolderName + '" class="dynDiv_moveDiv">' + '<div class="window-tool-close-button-holder">' + '<a id="blind-shape-window-close-btn" class="window-tool-close-button" href="#"></a>' + "</div>" +
			'<div class="dynDiv_resizeDiv_tl"></div>' + '<div class="dynDiv_resizeDiv_tr"></div>' + '<div class="dynDiv_resizeDiv_bl"></div>' + '<div class="dynDiv_resizeDiv_br"></div>' + "</div>");
		var t = this.windowContainer.append(e);
		$("#blind-shape-window-close-btn").click(function() {
			BlindShapeWindow.close();
			return false
		});
		ByRei_dynDiv.init.main();
		return t
	},
	close: function() {
		if (!BlindShapeWindow.isOnStage()) return false;
		BlindShapeWindow.windowContainer[0].removeChild(BlindShapeWindow.windowContainer[0].childNodes[0]);
		BlindShapeWindow.windowHolder = ""
	}
};
var SpotLightShapeWindow = {
	windowContainer: "",
	windowHolder: "",
	windowHolderName: "spotlight-shape-window",
	bodyOverflow: "",
	init: function(e) {
		if (this.isOnStage()) return;
		this.windowContainer = e;
		this.windowHolder = this.createSpotlightWindow();
		this.bodyOverflow = $("body").css("overflow");
		$("body").css("overflow", "hidden");
		this.createBackground();
		var t = Math.round((window.screen.width - 150) / 2).toString() + "px";
		var n = Math.round((window.screen.height - 150) / 2).toString() + "px";
		$("#spotlight-shape-window").css({
			left: t,
			top: n
		});
		SpotLightShapeWindow.setSpotLightSize()
	},
	isOnStage: function() {
		if (SpotLightShapeWindow.windowHolder != "") return true;
		return false
	},
	createSpotlightWindow: function() {
		var e = $('<div id="' + this.windowHolderName + '" class="dynDiv_moveDiv dynDiv_keepAspect">' + '<div class="window-tool-close-button-holder"><img src="sources/img/spotlight.png" height="100%" width="100%" id="img_in_sporlight" />' + '<a id="spotlight-shape-window-close-button" class="window-tool-close-button" href="#"></a></div>' + '<div class="dynDiv_resizeDiv_tl"></div>' +
			'<div class="dynDiv_resizeDiv_tr"></div>' + '<div class="dynDiv_resizeDiv_bl"></div>' + '<div class="dynDiv_resizeDiv_br"></div>' + "</div>");
		this.windowContainer.append(e);
		$("#spotlight-shape-window-close-button").click(function() {
			SpotLightShapeWindow.close();
			return false
		});
		ByRei_dynDiv.init.main();
		return this.windowContainer.children(String("#" + this.windowHolderName))
	},
	createBackground: function() {
		var e = new Array;
		for (var t = 0; t < 4; t++) {
			var n = document.createElement("div");
			n.id = "black-bg-" + String(t);
			n.setAttribute("class",
				"black-bg-item");
			e.push(SpotLightShapeWindow.windowHolder.after(n))
		}
		window.addEventListener("resize", SpotLightShapeWindow.setSpotLightSize());
		SpotLightShapeWindow.setSpotLightSize();
		$(".black-bg-item").css("background", "#000000");
		ByRei_dynDiv.api.drag = function() {
			$(".black-bg-item").css("background", "rgba(0,0,0,0.7)");
			$("#img_in_sporlight").css("opacity", "0.7")
		};
		ByRei_dynDiv.api.drop = function() {
			$(".black-bg-item").css("background", "rgba(0,0,0,1)");
			$("#img_in_sporlight").css("opacity", "1");
			SpotLightShapeWindow.setSpotLightSize()
		}
	},
	setSpotLightSize: function() {
		try {
			var e = new Object;
			e.top = SpotLightShapeWindow.windowHolder[0].offsetTop;
			e.left = SpotLightShapeWindow.windowHolder[0].offsetLeft;
			e.right = SpotLightShapeWindow.windowHolder[0].offsetWidth;
			e.bottom = SpotLightShapeWindow.windowHolder[0].offsetHeight;
			$("#black-bg-0").css("bottom", window.innerHeight - e.top);
			$("#black-bg-1").css("right", window.innerWidth - e.left);
			$("#black-bg-1").css("top", e.top);
			$("#black-bg-1").css("bottom", window.innerHeight - (e.top + e.bottom));
			$("#black-bg-2").css("left",
				e.left + e.right);
			$("#black-bg-2").css("top", e.top);
			$("#black-bg-2").css("bottom", window.innerHeight - (e.top + e.bottom));
			$("#black-bg-3").css("top", e.top + e.bottom)
		} catch (t) {}
	},
	close: function() {
		if (!SpotLightShapeWindow.isOnStage()) return;
		window.removeEventListener("resize", SpotLightShapeWindow.setSpotLightSize);
		$("body").css("overflow", this.bodyOverflow);
		while (SpotLightShapeWindow.windowContainer[0].firstChild) SpotLightShapeWindow.windowContainer[0].removeChild(SpotLightShapeWindow.windowContainer[0].firstChild);
		SpotLightShapeWindow.windowHolder = "";
		return false
	}
};
var TimerWidget = {
	"sw": "",
	"state": "",
	"isPlaying": false,
	"timeOut": [],

	"init": function() {
		this.sw = new Stopwatch(this.onTimerTick, 1000);
		this.state = 0; //Count up
		//7100
		$("#count-up-button").unbind().on("touchstart click", function() {
			TimerWidget.setState(0);
		});
		//7100
		$("#count-down-button").unbind().on("touchstart click", function() {
			TimerWidget.setState(1);
		});
		//7100
		$(".count-up-button").unbind().on("touchstart click", function() {
			$(".count-up-button input").prop("checked", true);
			TimerWidget.setState(0);
		});
		//7100
		$(".count-down-button").unbind().on("touchstart click", function() {
			$(".count-down-button input").prop("checked", true);
			TimerWidget.setState(1);
		});
		//7100
		$("#timer-start-button").unbind().on("touchstart click", function() {
			TimerWidget.start();
			return false;
		});
		//7100
		$("#timer-seconds-up").unbind().on("touchstart click", function() {
			TimerWidget.changeSeconds(1);
			return false;
		});
		//7100
		$("#timer-seconds-down").unbind().on("touchstart click", function() {
			TimerWidget.changeSeconds(-1);
			return false;
		});
		//7100
		$("#timer-minutes-up").unbind().on("touchstart click", function() {
			console.log("click");
			TimerWidget.changeMins(1);
			return false;
		});
		//7100
		$("#timer-minutes-down").unbind().on("touchstart click", function() {
			TimerWidget.changeMins(-1);
			return false;
		});
		this.setState(0);
		$("#timer-start-button")
			.parent().find('.tw-stop-image').addClass('tw-hide-button');
	},
	"getNode": function() {
		return '<div id="timer-container"><div id="timer-modes"><a class="count-up-button"><input id="count-up-button" class="radio" type="radio" name="timertype" value="0" checked="checked"><label class="timer-selected-mode" for="count-up-button">Count up</label></a><a class="count-down-button"><input id="count-down-button" class="radio" type="radio" name="timertype" value="1"><label class="label-margin count-down-button" for="count-down-button">Count down</label></a></div><div id="timer-display"><div id="timer-display-bg"><div id="timer-minutes-controls"><a id="timer-minutes-up" class="timmer-arrow-up" href="#"></a><a id="timer-minutes-down" class="timmer-arrow-down" href="#"></a></div><div id="timer-display-text"><p><span id="timer-minutes-text">00</span>:<span id="timer-seconds-text">00</span></p></div><div id="timer-seconds-controls"><a id="timer-seconds-up" class="timmer-arrow-up" href="#"></a><a id="timer-seconds-down" class="timmer-arrow-down" href="#"></a></div><div class="clearfix"></div></div></div><div id="timer-start-button-holder"><a id="timer-start-button" class="btn btn-primary btn-shadow" href="#"><p>Start</p></a></div></div>'
	},
	"onTimerTick": function() {
		console.log('onTimerTic');

		if ($("#timer-container").length == 0) {
			TimerWidget.sw.stop()
		};
		switch (TimerWidget.state) {
			case 0:
				var timeStr = TimerWidget.sw.toString().split(":");
				$("#timer-seconds-text").text(timeStr[2]);
				$("#timer-minutes-text").text(timeStr[1]);
				break;

			case 1:
				var secs = $("#timer-seconds-text").text();
				var mins = $("#timer-minutes-text").text();
				if (secs == 0 && mins == 0) {
					//console.log("complete!!");
					TimerWidget.timeOut = new Array();
					TimerWidget.resetState();
					return;
				}
				secs -= 1;
				if (secs == -1) {
					secs = 59;
					mins -= 1;
				}
				if (mins > 0) {
					if (secs == -1) {
						secs = 59;
						mins -= 1;
					}
				}
				$("#timer-seconds-text").text(TimerWidget.zpad(secs, 2));
				$("#timer-minutes-text").text(TimerWidget.zpad(mins, 2));
				if (secs == 0 && mins == 0) {
					//console.log("complete!!");
					TimerWidget.timeOut = new Array();
					TimerWidget.resetState();
				}
				break;
		}
	},

	"setState": function(_num) {
		console.log('setState');
		TimerWidget.resetState();
		TimerWidget.state = _num;
		switch (_num) {
			case 0:
				$("#timer-display-bg").removeClass("show-timer-controls");
				$("#timer-seconds-controls").css("visibility", "hidden");
				$("#timer-minutes-controls").css("visibility", "hidden");

				break;

			case 1:
				$("#timer-display-bg").addClass("show-timer-controls");
				$("#timer-seconds-controls").css("visibility", "visible");
				$("#timer-minutes-controls").css("visibility", "visible");
				break;
		}
	},

	"resetState": function() {
		TimerWidget.sw.stop();
		TimerWidget.sw.reset();
		$("#timer-seconds-text").text("00");
		$("#timer-minutes-text").text("00");
		if (TimerWidget.isPlaying) {
			TimerWidget.start();
		};
	},

	"changeSeconds": function(_num) {
		var secs = parseInt($("#timer-seconds-text").text(), 10) + _num;
		secs = secs > 59 ? 0 : secs;
		secs = Math.max(secs, 0);
		secs = TimerWidget.zpad(secs, 2);
		/*secs = secs.toString().length > 1 ? secs : String ("0" + secs);*/
		$("#timer-seconds-text").text(secs);
	},

	"changeMins": function(_num) {
		var mins = parseInt($("#timer-minutes-text").text(), 10) + _num;
		mins = mins > 59 ? 0 : mins;
		mins = Math.max(mins, 0);
		//mins = mins.toString().length > 1 ? mins : String ("0" + mins);
		mins = TimerWidget.zpad(mins, 2);
		$("#timer-minutes-text").text(mins);
	},

	"start": function() {
		console.log('start');
		if (TimerWidget.isPlaying) {
			$("#timer-start-button p").html("Start");
			TimerWidget.sw.stop();
			TimerWidget.isPlaying = false;
		} else {
			$("#timer-start-button p").html("Stop");
			TimerWidget.sw.start();
			TimerWidget.isPlaying = true;
			//count-down params
			if (TimerWidget.state == 1) {
				TimerWidget.timeOut = new Array(parseInt($("#timer-minutes-text").text(), 10), parseInt($("#timer-seconds-text").text(), 10));
			}
		}
	},
	"zpad": function(_num, _numDdigits) {
		_num = _num.toString();
		while (_num.length < _numDdigits) {
			_num = '0' + _num;
		};
		return _num;
	},
	"remove": function(e) {
		TimerWidget.resetState();
		e.html("");
	}
};
var Modal = function(e, t) {
	function r(e) {
		console.log("call game on resize ...");
		if ($(".modal-widget").length > 0) {
			console.log("centering content");
			n.centerWindow()
		} else window.removeEventListener("resize", r)
	}
	this.type = "";
	this.holder = e;
	this.id = t;
	var n = this;
	e.html('<div id="' + t + '" class="modal-widget"><div class="modal-btn-close"></div></div>');
	this.instance = $("#" + this.id);
	$(window).bind("onhashchange", function() {
		n.closeModal()
	});
	//7100
	this.instance.children(".modal-btn-close").on("touchstart click", function() {
		n.closeModal();
		if (currentContent.template != "splash-screen")
			if (n.type != "timer") {
				setBg("p04bg");
				setLessonInResources("")
			}
		$(n).trigger("onCloseModal")
	});
	this.closeModal = function() {
		if ($("#modal-audio-player-instance").length) $("#modal-audio-player-instance")[0].pause();
		if ($("#modal-video-player-instance").length) {
			$("#modal-video-player-instance")[0].pause();
			$("#modal-video-player-instance")[0].src = ""
		}
		this.holder.html("");
		this.instance = null
	};
	this.addContent = function(e, t) {
		console.log("creating window ...");
		this.type =
			t;
		switch (t) {
			case "iframe":
				this.instance.html("");
				this.instance.addClass("modal-iframe");
				this.instance.fadeIn();
				var i = document.createElement("iframe");
				i.setAttribute("id", "game-iframe");
				i.setAttribute("src", e["_url"]);
				i.setAttribute("scrolling", "no");
				i.setAttribute("wmode", "transparent");
				this.instance.append(i);
				break;
			case "audio":
				this.instance.addClass("modal-audio-player");
				this.instance.fadeIn();
				var s = Handlebars.compile($("#audio-tmpl").html());
				this.instance.append(s());
				initAudio(e._url);
				window.addEventListener("resize",
					r);
				break;
			case "video":
				var o = {};
				this.instance.addClass("modal-video-player");
				var s = Handlebars.compile($("#video-tmpl").html());
				var u = s({
					subtitlesURL: e.subtitlesURL
				});
				this.instance.append(u);
				initVideo(e._url);
				$(".jp-jplayer").bind($.jPlayer.event.resize, function(e) {
					var t = $(".jp-video").hasClass("jp-video-full");
					if (!t) setTimeout(function() {
						n.centerWindow()
					}, 500)
				});
				break;
			case "timer":
				this.instance.addClass("modal-timer-widget");
				this.instance.fadeIn();
				this.instance.append(TimerWidget.getNode());
				TimerWidget.init();
				//Fix close modal
				//7100
				this.instance.draggable({
					cursor: "move",
					scroll: false,
                	cancel: ".modal-btn-close, .btn-primary, .radio, .count-down-button, .count-up-button"
				});
				//Fix close modal
				$(".modal-btn-close").on('touchstart click', function(event) {
					event.preventDefault();
					$(".modal-timer-widget").remove();
				});
				break;
			case "links":
				this.instance.addClass("modal-links-widget"), this.instance.fadeIn(), this.instance.append(LinksWidget.getNode()), LinksWidget.init(), this.instance.draggable({
					cursor: "move"
				});
				break;
			case "delete":
				this.instance.addClass("modal-delete-widget"), this.instance.fadeIn(), this.instance.append(DeleteWidget.getNode()), DeleteWidget.init(), this.instance.draggable({
					cursor: "move"
				});
				break;
			case "open":
				this.instance.addClass("modal-open-widget"), this.instance.fadeIn(),
					this.instance.append(OpenLinksWidget.getNode()), OpenLinksWidget.init(), this.instance.draggable({
						cursor: "move"
					});
				break;
			case "text":
				if (e.width) this.instance.css({
					width: e.width,
					height: e.height,
					padding: e.padding
				});
				else this.instance.addClass("modal-text");
				this.instance.append(e.text);
				break
		}
		console.log("window create ...");
		window.addEventListener("resize", r);
		setTimeout(function() {
			n.centerWindow();
			n.instance.fadeIn()
		}, 500)
	};
	this.centerWindow = function() {
		console.log("centerWindow", this.instance.outerWidth(),
			this.instance.width());
		if (this.instance == null) {
			window.removeEventListener("resize", r);
			return
		}
		var e = Math.round((window.innerHeight - parseInt(this.instance.outerHeight())) / 2);
		e = Math.max(e, 0);
		var t = Math.round((window.innerWidth - parseInt(this.instance.outerWidth())) / 2);
		t = Math.max(t, 0);
		this.instance.css("left", t.toString() + "px");
		this.instance.css("top", e.toString() + "px");
		if ($(".jp-jplayer").length != 0) setTimeout(function() {
			n.centerWindow()
		}, 0)
	};
	this.resizeGame = function() {
		$("#game-iframe").css({
			top: "0px",
			left: "0px",
			width: window.innerWidth - 3 + "px",
			height: window.innerHeight - 3 + "px"
		})
	}
};
$.fn.DocumentViewer = function(e, t, n) {
	function u() {
		r.html('<div class="loading">Loading JSON...</div>');
		r.append('<div class="paper"><div class="container"><div class="image"></div></div></div>');
		r.append('<div class="cache-holder"></div>');
		var n = (new Date).getTime();
		$.getJSON(t + e + "?ts=" + n, function(e) {
			i = e;
			r.find(".loading").html("");
			a()
		}).error(function() {
			r.find(".loading").html("Error trying load: " + t + e)
		})
	}

	function a() {
		var n = e;
		$(".paper iframe").remove();
		if (n.indexOf("https://") >= 0 || n.indexOf("http://") >=
			0) {
			$(".paper").css("background", "none");
			$(".paper").append('<iframe src="' + n + '"></iframe>');
			$(".paper").css({
				width: "800px",
				height: "600px"
			})
		} else {
			var s = (new Date).getTime();
			var o = t + i.document + "?ts=" + s;
			$(".paper").hide();
			$(".paper .image").append('<img src="' + o + '" />');
			$(".cache-holder").append('<img src="' + o + '" class="paper-image-load" />').css("visibility", "hidden");
			$(".paper-image-load").on("load", function() {
				$(".container .title .feedback").fadeOut();
				$(".paper .image").draggable({
					cursor: "move",
					containment: "parent"
					/* FIX: este parámetro da error en runtime y no permite la visualización de la página
					cancel: marksId*/
				});
				$(".paper").attr("width", this.width).attr("height", this.height);
				$(".cache-holder").html("");
				$(".paper").fadeIn();
				c();
				h();
				p()
			}).each(function() {
				if (this.complete) $(this).load()
			})
		}
		var u = i.resources;
		var a = u.length;
		for (var f = 0; f < a; f++) {
			var d = $("<div></div>");
			r.find(".paper .image").append(d);
			d.attr("title", u[f].tooltip);
			d.attr("alt", u[f].tooltip);
			d.data("mark", u[f]);
			d.attr({
				"class": u[f].type + " mark layer" + (f + 1)
			}).css({
				top: u[f].top,
				left: u[f].left
			});
			//7100 //8758
			d.on("touchend click", function() {
				r.trigger("click_mark", [$(this).data("mark")])
			})
		}
		$(window).resize(l);
		$(window).resize(c)
	}

	function f(e) {
		var t = parseFloat(e);
		var n = parseInt(parseInt($(".paper").attr("width")) * t);
		var s = parseInt(parseInt($(".paper").attr("height")) * t);
		$(".paper .image img").attr("width", n).attr("height", s);
		var o = i.resources;
		var u = o.length;
		for (var a = 0; a < u; a++) r.find(".paper .mark.layer" + (a + 1)).css({
			top: parseInt(parseInt(o[a].top) * t) + "px",
			left: +parseInt(parseInt(o[a].left) * t) + "px"
		});
		l();
		p()
	}

	function l() {
		var e = parseInt($(".paper .image img").attr("width"));
		var t = parseInt($(".paper .image img").attr("height"));
		var n, r = 0;
		var i, s = 0;
		if ($(window).width() > e) n = parseInt($(window).width() * 1.5);
		else n = parseInt(e * 2);
		if ($(window).height() > t) i = parseInt($(window).height() * 1.5);
		else i = parseInt(t * 2);
		if ($(window).width() >= 1024) r = parseInt(n * .5) - parseInt(1024 * .5);
		else r = parseInt(n * .5) - parseInt($(window).width() * .5);
		s = parseInt(i * .5) - parseInt($(window).height() * .5);
		$(".paper .container").css({
			width: n + "px",
			height: i + "px",
			left: "-" + r + "px",
			top: "-" + s + "px"
		})
	}

	function c() {
		var e = $(window).height() - 10;
		var t = parseInt($(".paper").attr("height"));
		var r = e / t;
		if (r < 1) {
			var i = (1 - r) / n.length;
			n[0] = r;
			for (var o = 1; o < n.length; o++) n[o] = n[o - 1] + i
		} else
			for (var o = 0; o < n.length; o++) n[o] = 1;
		f(n[s])
	}

	function h() {
		var e = $(".paper .image img");
		var t = parseInt(e.attr("width"));
		var n = parseInt(e.attr("height"));
		var r = window.innerWidth;
		var i = t - r;
		if (i <= 0) return;
		var s = Math.ceil(r * 100 / t);
		e.attr({
			width: Math.floor(t * s / 100).toString() + "px",
			height: Math.floor(n * s / 100).toString() + "px"
		});
		p()
	}

	function p() {
		var e = parseInt($(window).width() / 2 - $(".paper .image").width() / 2 - $(".paper .container").offset().left);
		$(".paper .image").css({
			top: parseInt($(".paper .container").height() / 2 - $(".paper .image").height() / 2) + "px",
			left: e + "px"
		})
	}
	var r = $(this);
	var i;
	var s = 0;
	var o = $.extend({
		zoomNext: function() {
			if (s < n.length - 1) {
				s++;
				f(n[s])
			} else o.zoomReset();
			r.find(".paper .image .mark").removeClass("zoom1 zoom2").addClass("zoom" + s)
		},
		zoomIn: function() {
			if (s < n.length - 1) {
				s++;
				f(n[s])
			}
			r.find(".paper .image .mark").removeClass("zoom1 zoom2").addClass("zoom" + s)
		},
		zoomOut: function() {
			if (s > 0) {
				s--;
				f(n[s])
			}
			r.find(".paper .image .mark").removeClass("zoom1 zoom2").addClass("zoom" +
				s)
		},
		zoomReset: function() {
			s = 0;
			f(n[s]);
			r.find(".paper .image .mark").removeClass("zoom1 zoom2").addClass("zoom" + s)
		}
	});
	r.addClass("jDocumentViewer");
	u();
	return o
};
var url_documents = "sources/contents/json/";
var viewer;
var Subtitles = {
	videoId: "",
	subtitleElement: "",
	currentSubtitle: "",
	data: "",
	toSeconds: function(e) {
		var t = 0;
		if (e) {
			var n = e.split(":");
			for (i = 0; i < n.length; i++) t = t * 60 + parseFloat(n[i].replace(",", "."))
		}
		return t
	},
	strip: function(e) {
		if (e != null || e != undefined) return e.replace(/^\s+|\s+$/g, "");
		return ""
	},
	parseSubtitles: function() {
		var e = Subtitles.subtitleElement.text();
		Subtitles.subtitleElement.text("");
		e = e.replace(/\r\n|\r|\n/g, "\n");
		var r = {};
		e = Subtitles.strip(e);
		var u = e.split("\n\n");
		var count = 0;
		for (s in u) {
			st = u[s].split("\n");
			if (st.length >= 2) {
				n = st[0];
				i = Subtitles.strip(st[1].split(" --\x3e ")[0]);
				o = Subtitles.strip(st[1].split(" --\x3e ")[1]);
				t = st[2];
				if (st.length > 2)
					for (j = 3; j < st.length; j++) t += "\n" + st[j];
				is = Subtitles.toSeconds(i);
				os = Subtitles.toSeconds(o);
				r[count] = {
					i: i,
					o: os,
					t: t,
					e: is
				}
			}
			count++;
		}
		Subtitles.data = r
	},
	printSubtitle: function(e) {
		if (Subtitles.data == undefined) return;
		var t = e;
		var n = -1;
		$.each(Subtitles.data, function(index, val) {
			if (val.e < t) n = index;
		});
		if (n >= 0)
			if (n != Subtitles.currentSubtitle) {
				var i = this.clearTextFormat(Subtitles.data[n].t);
				Subtitles.subtitleElement.html("<p>" +
					i + "</p>");
				Subtitles.currentSubtitle = n
			} else if (Subtitles.data[n].o < t) Subtitles.subtitleElement.html("")
	},
	clearTextFormat: function(e) {
		e = e || "";
		e = e.replace(/\ufffd/g, "&rsquo;");
		e = e.replace(/\ufffd/g, "&aacute;");
		e = e.replace(/\ufffd/g, "&eacute;");
		e = e.replace(/\ufffd/g, "&iacute;");
		e = e.replace(/\ufffd/g, "&oacute;");
		e = e.replace(/\ufffd/g, "&uacute;");
		return e
	},
	init: function(e) {
		Subtitles.subtitleElement = e;
		Subtitles.videoId = Subtitles.subtitleElement.attr("data-video");
		if (!Subtitles.videoId) return;
		var t = Subtitles.subtitleElement.attr("data-srt");
		if (t) e.load(t, function(e, t, n) {
			Subtitles.parseSubtitles()
		});
		else Subtitles.parseSubtitles()
	}
};
var TabMenu = {
	type: "",
	color: "#000",
	canvas: "",
	tabList: [],
	initCanvas: function(e, t) {
		TabMenu.tabList = new Array;
		t = t == undefined ? 0 : t;
		TabMenu.canvas = new fabric.StaticCanvas(e);
		fabric.Image.fromURL("./sources/img/lesson-menu/base" + TabMenu.type.toString() + ".png", function(e) {
			e.originX = "left";
			e.originY = "top";
			TabMenu.canvas.add(e);
			TabMenu.loadTabs(t)
		})
	},
	loadTabs: function(e) {
		fabric.loadSVGFromURL("./sources/img/lesson-menu/tabs" + TabMenu.type.toString() + ".svg", function(t, n) {
			for (var r in t) {
				t[r].set({
					originX: "left",
					originY: "top",
					left: 8,
					top: 8,
					stroke: TabMenu.color,
					visible: false
				});
				TabMenu.canvas.add(t[r]);
				TabMenu.tabList.push(TabMenu.canvas.item(TabMenu.canvas.getObjects().length - 1))
			}
			TabMenu.canvas.renderAll();
			TabMenu.showMenu(e)
		})
	},
	showMenu: function(e) {
		var t = window.location.href.slice(window.location.href.indexOf("/") + 1).split("#");
		var n = t[t.length - 1];
		document.cookie = n + "=" + e;
		var r = TabMenu.tabList.length;
		for (var i = 0; i < r; i++) TabMenu.tabList[i]["visible"] = false;
		if (TabMenu.tabList.length === 0) return;
		TabMenu.tabList[e]["visible"] =
			true;
		TabMenu.canvas.renderAll()
	}
};
var _inicial_width_windox = 0;
var svg_content_saved = [];
var menuController = {
	utilModal: "",
	initMenuButtonsHandler: function() {
		$("#menu-right-base").css("visibility", "visible");
		$("#drawing-tools-holder").css("visibility", "hidden");
		menuController.getFreezingCanvas_mx();
		$(".right-column ul").append('<li class="right-item-menu"> <a> <h2>&nbsp;</h2> </a> </li>');
		try {
			var e = false;
			var t = false;
			var n;
			var r = "#000";
			var i = false;
			var s = 2;
			var o = $(".selector");
			var u;
			var a;
			var f = document.getElementById("grad");
			var l = f.getContext("2d");
			f.onmousemove = function(e) {
				if (i) {
					n = l.getImageData(e.pageX -
						$("#grad").offset().left, e.pageY - $("#grad").offset().top, 1, 1);
					r = "#" + c(n.data[0]) + c(n.data[1]) + c(n.data[2]);
					$(".color-sel").css("background", r)
				}
			};
			f.onmousedown = function() {
				i = true
			};
			f.onmouseup = function() {
				i = false
			};
			f.onclick = function(e) {
				n = l.getImageData(e.pageX - $("#grad").offset().left, e.pageY - $("#grad").offset().top, 1, 1);
				r = "#" + c(n.data[0]) + c(n.data[1]) + c(n.data[2]);
				$(".color-sel").css("background", r)
			};

			function c(e) {
				if (e == null) return "00";
				e = parseInt(e);
				if (e == 0 || isNaN(e)) return "00";
				e = Math.max(0, e);
				e = Math.min(e,
					255);
				e = Math.round(e);
				return "0123456789ABCDEF".charAt((e - e % 16) / 16) + "0123456789ABCDEF".charAt(e % 16)
			}

			function h() {
				var e = l.createLinearGradient(0, 0, 220, 0);
				e.addColorStop(0, "rgb(0,   0,   0)");
				e.addColorStop(.15, "rgb(255,   0, 255)");
				e.addColorStop(.33, "rgb(0,     0, 255)");
				e.addColorStop(.49, "rgb(0,   255, 255)");
				e.addColorStop(.67, "rgb(0,   255,   0)");
				e.addColorStop(.84, "rgb(255, 255,   0)");
				e.addColorStop(1, "rgb(255,   0,   0)");
				l.fillStyle = e;
				l.fillRect(0, 0, 220, 22)
			}
			h();

			function p(e) {
				if (e.targetTouches.length ==
					1) {
					e.preventDefault();
					if (!erase) ctx.globalCompositeOperation = "source-over";
					ctx.strokeStyle = r;
					ctx.lineTo(e.touches[0].pageX, e.touches[0].pageY);
					u = e.touches[0].pageX;
					a = e.touches[0].pageY;
					ctx.stroke()
				}
			}

			function d(e) {
				if (e.targetTouches.length == 1) {
					e.preventDefault();
					canvas.removeEventListener("touchmove", p, false);
					canvas.removeEventListener("touchend", d, false)
				}
			}
		} catch (v) {}
		$(".drawing-tool-item a").click(function() {
			if ($(this).closest("li").attr("id") == "db-marker" || $(this).closest("li").attr("id") == "db-pencil") menuController.showColorBar();
			else menuController.hideColorBar();
			DrawingApp.init();
			SpotLightShapeWindow.close();
			BlindShapeWindow.close();
			DrawingApp.setCurrentTool($(this).attr("href"));
			return false
		});
		$("#db-erase-all a").click(function() {
			menuController.hideColorBar();
			menuController.removeFreezingCanvas_mx();
			DrawingApp.removeCanvas();
			BlindShapeWindow.close();
			SpotLightShapeWindow.close();
			return false
		});
		$("#db-blind a").click(function() {
			menuController.hideColorBar();
			DrawingApp.removeCanvas();
			SpotLightShapeWindow.close();
			BlindShapeWindow.init($("#blind-shape-comp"));
			return false
		});
		$("#db-spotlight a").click(function() {
			menuController.hideColorBar();
			DrawingApp.removeCanvas();
			BlindShapeWindow.close();
			SpotLightShapeWindow.init($("#blind-shape-comp"));
			return false
		});
		$("#db-pointer a").click(function() {
			menuController.hideColorBar();
			menuController.removeFreezingCanvas_mx();
			menuController.FreezingCanvas_mx();
			return false
		});
		$("#db-expand a").click(function() {
			menuController.hideColorBar();
			if ($(".document-viewer").length > 0) viewer.zoomReset();
			return false
		});
		$("#db-links a").click(function() {
			menuController.hideColorBar();
			if ($("#db-links").hasClass("drawing-tool-disabled") != true && $("#db-links").length != 0) {
				menuController.utilModal = new Modal($("#rooftops-util-modal"), "util-modal");
				menuController.utilModal.addContent({}, "links")
			}
			return false
		});
		$("#db-timmer a").click(function() {
			menuController.hideColorBar();
			menuController.utilModal = new Modal($("#rooftops-util-modal"), "util-modal");
			menuController.utilModal.addContent({}, "timer");
			return false
		});
		$("#drawing-tools-close-holder a").click(function() {
			menuController.hideColorBar();
			menuController.openPaintTools();
			return false
		});
		$(".menu-button a").click(function() {
			menuController.hideColorBar();
			switch ($(this).attr("id")) {
				case "home-btn":
					appGoto("p02");
					break;
				case "go-back-btn":
					window.history.back();
					break;
				case "resources-btn":
					appGoto("p06");
					break;
				case "resources-min-btn":
					appGoto("p06");
					break;
				case "my-resources-btn":
					appGoto("p07");
					break;
				case "info-btn":
					appGoto("p02_100");
					break;
				case "teaching-notes-btn":
					window.open(currentContent.data["teacherInfo"]);
					break;
				case "docs-btn":
					window.open(teachingNotes);
					break;
				case "paint-tools-btn":
					menuController.openPaintTools();
					break
			}
			return false
		})
	},
	FreezingCanvas_mx: function() {
		var e = document.getElementById("drawing-app-canvas");
		var t = e.toDataURL("image/svg+xml");
		//7443
		var n = '<svg class="freezing_canvas_mx" id="freezing_canvas_mx" xmlns="http://www.w3.org/2000/svg" pointer-events="none"  xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" baseProfile="tiny" style="position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 99; display:none;"  >';
		n += "</svg>";
		$("body").append(n);
		var r = window.location.href.slice(window.location.href.indexOf("/") + 1).split("#");
		var i = r[r.length - 1];
		menuController.saveFreezingCanvas_mx(i, t);
		if (_inicial_width_windox == 0) _inicial_width_windox = $(window).width();
		$(window).on("resize", function() {
			if ($(window).width() >= $("#maincontainer").width()) {
				var e = ($(window).width() - _inicial_width_windox) / 2;
				$("#freezing_canvas_mx").css("left", Math.round(e) + "px")
			}
		})
	},
	removeFreezingCanvas_mx: function() {
		if ($(".freezing_canvas_mx").length != 0) {
			DrawingApp.removeCanvas();
			$(".freezing_canvas_mx").remove()
		}
	},
	saveFreezingCanvas_mx: function(e, t) {
		if (svg_content_saved.length > 0)
			for (var n = 0; n < svg_content_saved.length; n++) {
				if (svg_content_saved[n].id == e) svg_content_saved[n].id = e
			} else svg_content_saved.push({
				id: e,
				xml: t
			})
	},
	getFreezingCanvas_mx: function() {
		var e = window.location.href.slice(window.location.href.indexOf("/") + 1).split("#");
		var t = e[e.length - 1];
		menuController.removeFreezingCanvas_mx();
		if (svg_content_saved.length > 0)
			for (var n = 0; n < svg_content_saved.length; n++)
				if (svg_content_saved[n].id ==
					t) {
					//7443
					var r = '<svg class="freezing_canvas_mx" id="freezing_canvas_mx" xmlns="http://www.w3.org/2000/svg" pointer-events="none"  xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" baseProfile="tiny" style="position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 99;"  >';
					r += '\t\t<image xmlns="http://www.w3.org/2000/svg" id="freezing_canvas_image" width="1800" height="1200" xlink:href="' + svg_content_saved[n].xml + '" xmlns:xlink="http://www.w3.org/1999/xlink"/>';
					r += "</svg>";
					$("body").append(r)
				}
	},
	showColorBar: function() {
		$(".box_color_drawing").show()
	},
	hideColorBar: function() {
		$(".box_color_drawing").hide()
	},
	openPaintTools: function() {
		var e = $("#drawing-tools-holder").css("visibility") == "visible" ? true : false;
		if (e) {
			$("#menu-right-base").css("visibility", "visible");
			$("#drawing-tools-holder").css("visibility", "hidden");
			this.closeAllLayers()
		} else {
			$("#menu-right-base").css("visibility", "hidden");
			$("#drawing-tools-holder").css("visibility", "visible")
		}
	},
	closeAllLayers: function() {
		if ($(".freezing_canvas_mx").length !=
			0 || $("#drawing-app-canvas-holder").length != 0) {
			DrawingApp.removeCanvas();
			$("#drawing-app-canvas-holder").remove();
			$(".freezing_canvas_mx").remove()
		}
		SpotLightShapeWindow.close();
		BlindShapeWindow.close();
		if (menuController.utilModal != "")
			if (menuController.utilModal.instance != null) menuController.utilModal.instance.find(".modal-btn-close").trigger("click");
			else menuController.utilModal = ""
	},
	reset: function() {
		$("bottom-menu").find("a").off()
	}
};
Handlebars.registerHelper("getListStyle", function(e) {
	return "tab-list-" + e.length.toString() + "items"
});
Handlebars.registerHelper("getMBoxStyle", function(e) {
	return "p04-media-box" + e.length.toString()
});
Handlebars.registerHelper("getObject", function(e) {
	return JSON.stringify(e)
});
Handlebars.registerHelper("bottomMenu", function(e) {
	var t = Handlebars.compile($("#left-" + e).html() + $("#bottom-menu").html());
	return t()
});
Handlebars.registerHelper("getUnitGrid", function(e, t, n) {
	var r = "";
	var i = "";
	var s = new Array;
	var o = e.length;
	switch (o) {
		case 10:
			s = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4];
			break;
		case 9:
			s = [4, 4, 4, 4, 4, 4, 4, 4, 4];
			break;
		case 8:
			s = ["6l", "6r", 4, 4, 4, 4, 4, 4];
			break;
		case 7:
			s = ["6l", "6r", "6l", "6r", 4, 4, 4];
			break;
		case 6:
			s = [4, 4, 4, 4, 4, 4];
			break;
		case 5:
			s = ["6l", "6r", 4, 4, 4];
			break;
		case 4:
			s = ["6l", "6r", "6l", "6r"];
			break;
		case 3:
			s = [4, 4, 4];
			break;
		case 2:
			s = [6, 6];
			break
	}
	for (var u = 0; u < o; u++) {
		i = "p03-lozengue-item col-xs-" + parseInt(s[u]);
		r += "<div class='" + i + "'>";
		r += "<div class='unit-menu-" + s[u] + " " + t + "'>";
		r += "<a href=" + e[u][0] + ">";
		r += "<p class='unit-lozengue'>" + e[u][1] + "</p></a></div></div>"
	}
	return r
});
Handlebars.registerHelper("getResourcesUnitBtn", function(e, t, n) {
	var r = e.slice(0);
	var i = 0;
	var s = n.length;
	var o = "";
	var u;
	var a = "";
	var f = "";
	for (var l = 0; l < s; l++) {
		var c = n[l].length;
		for (var h = 0; h < c; h++) {
			var p = "col-xs-" + String(parseInt(n[l][h], 10));
			var d = "align-" + n[l][h].substr(n[l][h].length - 1, 1);
			if (n[l][h].indexOf("x") == -1) {
				u = r.shift();
				if (u[0] == "#" || u[0] == "") {
					a = " disable-box ";
					f = "disable-link"
				} else {
					a = " ";
					f = " "
				}
				o += '<div class="' + a + p + " " + d + " " + t + '">';
				o += '<a class="p05-item-nav ' + f + '" href="' + u[0] + '">';
				o +=
					'<img src="' + u[1] + '" alt="' + u[2] + '"></a>';
				o += "</div>"
			} else o += '<div class="' + p + " " + d + " " + t + '"></div>'
		}
	}
	return o
});
Handlebars.registerHelper("getResourceBoxes", function(e, t) {
	var n = "";
	var r = "";
	var i = new Array;
	var s = e.length;
	var o = "";
	var u = "";
	switch (s) {
		case 10:
			i = ["x", "x", "x", "x", "x", "x", "x", "x", "x", "x"];
			o = "sm";
			break;
		case 9:
			i = ["2c", "2c", "2c", "2c", "2c", "3c", "3c", "3c", "3c"];
			o = "sm";
			break;
		case 8:
			i = ["3c", "3c", "3c", "3c", "3c", "3c", "3c", "3c"];
			o = "sm";
			break;
		case 7:
			i = ["3c", "3c", "3c", "3c", "4c", "4c", "4c"];
			o = "sm";
			break;
		case 6:
			i = ["4c", "4c", "4c", "4c", "4c", "4c"];
			o = "sm";
			break;
		case 5:
			i = ["4c", "4c", "4c", "6c", "6c"];
			o = "sm";
			break;
		case 4:
			i =
				["6l", "6r", "6l", "6r"];
			o = "sm";
			break;
		case 3:
			i = ["4c", "4c", "4c"];
			o = "lg";
			break;
		case 2:
			i = ["6c", "6c"];
			o = "lg";
			break;
		case 1:
			i = ["12c"];
			o = "lg";
			break
	}
	for (var a = 0; a < s; a++) {
		var f = parseInt(i[a]);
		r = isNaN(f) === true ? "" : "col-sm-" + f;
		//6427
		//Fix scroll ubuntu in resources
		xs = isNaN(f) === true ? "" : "col-xs-" + f;
		if (s == 10 && a < 5) n += "<div class='" + r + " grid-10-top'>";
		else if (s == 10 && a >= 5) n += "<div class='" + r + " grid-10-bottom'>";
		else if (s == 9 && a < 5) n += "<div class='" + r + " " + xs + " grid-9'>";
		else n += "<div class='" + r + " " + xs + " button-len-" + s + "'>";
		if (e[a]._url == undefined || e[a]._url == "") u = " disable-box ";
		else u = "";
		n += "<div class='rb-holder-" +
			o + u + "'>";
		n += "<div class='resource-box rb-color rb-size-" + o + "'>";
		if (e[a]._url == undefined || e[a]._url == "") n += "<a class='disable-link' href='empty'>";
		else n += "<a obj='" + JSON.stringify(e[a]) + "' href='#'>";
		if (e[a]["_decoration"] != undefined) {
			n += "<div class='rb-decoration " + e[a]["_decoration"] + "'>";
			if (e[a]["_currentLesson"] != undefined) n += "<p>" + e[a]["_currentLesson"][2] + "</p>";
			n += "</div>"
		}
		n += "<div class='rb-img rb-img-" + o + "'>";
		n += "<img src='" + e[a]["_img"] + "' alt='" + e[a]["_type"] + "' + /></div>";
		n += "<div class='rb-text-holder rb-text-" +
			o + "'>";
		n += "<p>" + e[a]["_text"] + "</p></img></div></a></div></div></div>"
	}
	return n
});
Handlebars.registerHelper("ifEmpty", function(e, t) {
	var n = t.hash.condition != undefined ? t.hash.condition : "";
	if (e == "" || e == n) return t.fn(this);
	else return t.inverse(this)
});
Handlebars.registerHelper("interpolate", function(e, t) {
	return new Handlebars.SafeString(t + e)
});
Handlebars.registerHelper("splashAnimation", function(e) {
	var t = "";
    //#7808
//	if (isDispositivo){
  	if (isDispositivo && !(dispositivo.search(/linux|x11/) != -1 && window.location.host.indexOf("localhost") != -1 && navigator.appVersion.indexOf("Android") == -1)){        
        t = '<img src="./sources/animations/splash-screen/images/personajes_00038.png" alt="Oxford Rooftops"/>';
    }else{ 
        t = '<iframe class="iframe-animation" id="splash-logo-animation" src="sources/animations/splash-screen/splash-screen-characters.html" width="600" height="490" ></iframe>';
    }
	return t
});
Handlebars.registerHelper("parseUnit", function(e) {
	if (e === undefined || e === null) return "unit-color-" + "1";
	var t = e.substr(e.length - 5, 1);
	return "unit-color-" + t
});
Handlebars.registerHelper("ifvalue", function(e, t) {
	if (t.hash.value === e) output = "<a href='" + e + "' class='resources-link disabled'><h2>";
	else output = "<a href='" + e + "' class='resources-link'><h2>";
	return output
});
(function(e) {
	e.fn.render = function(e) {
		var t = this;
		t.html(e);
		t.trigger("render")
	}
})(jQuery);
window.onhashchange = function() {
	try{
		var e = getLocationHash();
		if (e == "media-loaded") return;
		currentContent = resolveHash(e);
		var t = Handlebars.compile($("#" + currentContent.template).html());
		var n = t(currentContent.data);
		setBg(currentContent.background);
		menuController.reset();
		saveLastPageVisited(e);
		$("#maincontainer").bind("render", function() {
			initTemplate(currentContent.template);
			checkMediaModal();
			$(this).unbind("render");
			if (location != -1 && navigator.appVersion.indexOf("Android") != -1) {
				$("#bg-holder").css("height", "750px");
				$("#mainbg").css("height", "750px");
			} else {
				$("#bg-holder").css("height", window.innerHeight + "px");
				$("#mainbg").css("height", window.innerHeight + "px");
			}
		});
		$("#maincontainer").render(n);
	}catch(e){
		// 8023
		setTimeout(window.onhashchange, 500);
	}
};
var resourcesMenu_audio, currentTemplate = "";
var splashScreenReady = function() {
	$("#p01-buttons-holder").each(function(e) {
		$(this).children(e).css({
			visibility: "visible"
		})
	});
	setContainerLinks($("#p01-buttons-holder").find("a"));
	$("body").css("style", "");
	$(".bt_acknowledgements").click(function(e) {
		var t = {
			text: $("#splash-acknow").html(),
			width: "350px",
			height: "232px",
			padding: "40px 0"
		};
		mediaModal = new Modal($("#rooftops-util-modal"), "util-modal");
		mediaModal.addContent(t, "text");
		$("#rooftops-util-modal .btn").click(function(e) {
			var t = $(this).attr("href");
			window.open(t);
			e.preventDefault()
		});
		e.preventDefault()
	})
};
var lessonMenuReady = function() {
	var e = currentContent.data.lessonColor;
	document.cookie = "current_hash =" + getLocationHash();
	var t = window.location.href.slice(window.location.href.indexOf("/") + 1).split("#");
	var n = t[t.length - 1];
	var r = getCookieses(n) || 0;
	TabMenu.color = e;
	TabMenu.type = currentContent.data.tabs.length;
	TabMenu.initCanvas($("#tab-canvas")[0], r);
	var i = function() {
		$("#tab-list li").each(function(e, t) {
			$(this).attr("tab-id", e + 1)
		}).click(function(t) {
			t.preventDefault();
			if ($(this).hasClass("tab-list-active")) return;
			$(".tab-list-active").removeClass("tab-list-active").attr("style", "");
			$(this).addClass("tab-list-active").attr("style", "color:" + e);
			TabMenu.showMenu(parseInt($(this).attr("tab-id")) - 1);
			var n = $(this).attr("tab-id");
			$(".tab-content").each(function(e, t) {
				if (e + 1 == n) $(this).css("display", "table");
				else $(this).css("display", "none")
			})
		});
		$("#menu-tab-container").css("visibility", "visible")
	};
	var s = function() {
		$("#tab-list li").each(function(e) {
			$(this).unbind("click")
		});
		$("#menu-tab-container").remove()
	};
	i();
	$("#tab-list li").eq(r).trigger("click");
	$(".book-thumb-button").click(function() {
		var e = {
			_document: $(this).attr("href")
		};
		loadMedia("book", e);
		s();
		return false
	});
	$(".media-link").click(function() {
		var e = JSON.parse($(this).attr("obj"));
		if (e._url != "") {
			loadMedia(e._type, e);
			s();
		}
		return false
	});
	$("#p04-header-info a").click(function() {
		appGoto($(this).attr("href"));
		return false
	});
	$(".p04-media-box1, .p04-media-box2, .p04-media-box3").css("background-color", e);
	var o = currentContent.data.teacherInfo === undefined ? false : true;
	if (!o) $("#teaching-notes-btn").addClass("hide")
};
var lmAnimation = {
	stage: "",
	character: "",
	currentCharacter: "",
	banderinCharacter: "",
	loader: "",
	banderinW: 1080,
	init: function() {
		lmAnimation.stage = new createjs.Stage("stage-canvas");
		lmAnimation.loader = new createjs.LoadQueue(false);
		var e;
		lmAnimation.currentCharacter = Math.round(Math.random());
		if (lmAnimation.currentCharacter == 0) {
			lmAnimation.stage.canvas.height = 250;
			if (isDispositivo) {
				e = [{
					src: "./sources/animations/lesson-menu/banderin/banderin-still.png",
					id: "character"
				}];
				lmAnimation.loader.addEventListener("complete",
					lmAnimation.handleCompleteDispositivo)
			} else {
				e = [{
					src: "./sources/animations/lesson-menu/banderin/banderin-sprite.png",
					id: "character"
				}];
				lmAnimation.loader.addEventListener("complete", lmAnimation.handleComplete)
			}
		} else {
			lmAnimation.stage.canvas.height = 590;
			if (isDispositivo) {
				e = [{
					src: "./sources/animations/lesson-menu/hiedra/hiedra.png",
					id: "hiedra"
				}];
				lmAnimation.loader.addEventListener("complete", lmAnimation.handleCompleteDispositivo)
			} else {
				e = [{
					src: "./sources/animations/lesson-menu/hiedra/hiedra_hojas.png",
					id: "character"
				}, {
					src: "./sources/animations/lesson-menu/hiedra/hiedra.png",
					id: "hiedra"
				}];
				lmAnimation.loader.addEventListener("complete", lmAnimation.handleComplete)
			}
		}
		lmAnimation.loader.loadManifest(e)
	},
	handleComplete: function() {
		var e;
		console.log("se cargan los assets");
		if (lmAnimation.currentCharacter == 0) {
			e = new createjs.SpriteSheet({
				framerate: 24,
				images: [lmAnimation.loader.getResult("character")],
				frames: [
					[0, 0, 2048, 256, 0, -27, -25],
					[0, 256, 2048, 256, 0, -27, -25],
					[0, 512, 2048, 256, 0, -27, -25],
					[0, 768, 2048, 256, 0, -27, -25],
					[0, 1024, 2048, 256, 0, -27, -25],
					[0, 1280, 2048, 256, 0, -27, -25],
					[0, 1536, 2048, 256, 0, -27, -25]
				],
				animations: {
					animacion: {
						speed: 1,
						frames: [0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0],
						next: "animacion"
					}
				}
			});
			lmAnimation.character = new createjs.Sprite(e, "animacion");
			lmAnimation.character.x = 0;
			lmAnimation.character.y = -40;
			lmAnimation.stage.addChild(lmAnimation.character)
		} else {
			e = new createjs.SpriteSheet({
				framerate: 8,
				images: [lmAnimation.loader.getResult("character")],
				frames: [
					[0, 0, 1024,
						512, 0, -24, -5
					],
					[1024, 0, 1024, 512, 0, -24, -5],
					[2048, 0, 1024, 512, 0, -24, -5],
					[0, 512, 1024, 512, 0, -24, -5],
					[1024, 512, 1024, 512, 0, -24, -5],
					[2048, 512, 1024, 512, 0, -24, -5]
				],
				animations: {
					animacion: {
						speed: 1,
						frames: [0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0],
						next: "animacion"
					}
				}
			});
			lmAnimation.character = new createjs.Sprite(e, "animacion");
			var t = new createjs.Bitmap(lmAnimation.loader.getResult("hiedra"));
			lmAnimation.character.x = t.x = 350;
			lmAnimation.stage.addChild(t, lmAnimation.character)
		}
		createjs.Ticker.setFPS(24);
		createjs.Ticker.addEventListener("tick", lmAnimation.onTick)
	},
	handleCompleteDispositivo: function() {
		if (lmAnimation.currentCharacter == 0) {
			lmAnimation.character = new createjs.Bitmap(lmAnimation.loader.getResult("character"));
			lmAnimation.character.x = 0;
			lmAnimation.character.y = -40
		} else {
			lmAnimation.character = new createjs.Bitmap(lmAnimation.loader.getResult("hiedra"));
			lmAnimation.character.x = 350
		}
		lmAnimation.stage.addChild(lmAnimation.character);
		lmAnimation.stage.update()
	},
	onTick: function(e) {
		lmAnimation.stage.update(e)
	}
};
var cantidad_animated = 0,
	audio_bird;
var mmAnimation = {
	stage: "",
	treeCharacter: "",
	bird1Character: "",
	bird2Character: "",
	bird3Character: "",
	loader: "",
	scw: screen.width,
	imgw: 3200,
	posLeft: "",
	dispRight: "",
	init: function() {
		if (mmAnimation.scw >= 1600) {
			mmAnimation.posLeft = 0;
			mmAnimation.dispRight = 1
		} else if (mmAnimation.scw >= 1360) {
			mmAnimation.posLeft = -240;
			mmAnimation.dispRight = 1.15
		} else {
			mmAnimation.posLeft = -576;
			mmAnimation.dispRight = 1.36
		}
		mmAnimation.configAudio();
		mmAnimation.stage = new createjs.Stage("mmAnimation-canvas");
		mmAnimation.loader = new createjs.LoadQueue(false);
		var e;
		var t = "./sources/animations/main-menu/";
		if (isDispositivo) {
			e = [{
				src: t + "arbol_still.png",
				id: "tree"
			}, {
				src: t + "foreground.png",
				id: "fg"
			}];
			mmAnimation.loader.addEventListener("complete", mmAnimation.handleCompleteDispositivo)
		} else {
			e = [{
				src: t + "ave2.png",
				id: "bird2"
			}, {
				src: t + "ave3.png",
				id: "bird3"
			}, {
				src: t + "arbol.png",
				id: "tree"
			}, {
				src: t + "foreground.png",
				id: "fg"
			}];
			TweenMax.to($(".parallax-holder .layer1"), 100, {
				backgroundPosition: "-2048px 0",
				ease: Linear.easeNone,
				repeat: -1
			});
			mmAnimation.loader.addEventListener("complete",
				mmAnimation.handleComplete)
		}
		mmAnimation.loader.loadManifest(e)
	},
	configAudio: function() {
		if (audio_bird != undefined) {
			mmAnimation.initAudio();
			return
		}
		createjs.FlashPlugin.swfPath = "./js/";
		createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashPlugin]);
		createjs.Sound.alternateExtensions = ["ogg"];
		var e = [{
			src: "sources/animations/main-menu/sounds/birds.mp3",
			id: "mainTheme"
		}];
		createjs.Sound.addEventListener("fileload", mmAnimation.initAudio);
		createjs.Sound.registerManifest(e)
	},
	initAudio: function() {
		mmAnimation.playSound("mainTheme", 1)
	},
	playSound: function(e, t) {
		audio_bird = createjs.Sound.play(e, createjs.Sound.INTERRUPT_EARLY, 0, 0, t)
	},
	removeAudio: function() {
		if (audio_bird != undefined) {
			audio_bird.stop()
			audio_bird._paused = true;
		}
	},
	handleComplete: function() {
		var e = new createjs.SpriteSheet({
			framerate: 24,
			images: [mmAnimation.loader.getResult("bird2")],
			frames: [
				[0, 0, 128, 256, 0, -218, -152],
				[128, 0, 128, 256, 0, -218, -152],
				[256, 0, 128, 256, 0, -218, -152],
				[384, 0, 128, 256, 0, -218, -152],
				[512, 0, 128, 256, 0, -218, -152],
				[640, 0, 128, 256, 0, -218, -152],
				[768, 0, 128, 256, 0, -218, -152],
				[0, 256, 128, 256, 0, -218, -152],
				[128, 256, 128, 256, 0, -218, -152]
			],
			animations: {
				fly: {
					frames: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8],
					speed: 1
				}
			}
		});
		var t = new createjs.SpriteSheet({
			framerate: 24,
			images: [mmAnimation.loader.getResult("bird3")],
			frames: [
				[0, 0, 128, 128, 0, -24, -6],
				[128, 0, 128, 128, 0, -24, -6],
				[256, 0, 128, 128, 0, -24, -6],
				[0, 128, 128, 128, 0, -24, -6],
				[128, 128, 128, 128, 0, -24, -6],
				[256, 128, 128, 128, 0, -24, -6],
				[0, 256, 128, 128, 0, -24, -6],
				[128, 256, 128, 128, 0, -24, -6],
				[256, 256, 128, 128, 0, -24, -6]
			],
			animations: {
				fly: {
					frames: [0, 1, 2, 3, 4, 5, 6, 7, 8],
					speed: 1
				}
			}
		});
		var n = new createjs.SpriteSheet({
			framerate: 24,
			images: [mmAnimation.loader.getResult("tree")],
			frames: [
				[0, 0, 512, 512, 0, 0, -12],
				[512, 0, 512, 512, 0, 0, -12],
				[1024, 0, 512, 512, 0, 0, -12],
				[0, 512, 512, 512, 0, 0, -12],
				[512, 512, 512, 512, 0, 0, -12],
				[1024, 512, 512, 512, 0, 0, -12]
			],
			animations: {
				air: {
					speed: 1,
					frames: [0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0]
				}
			}
		});
		mmAnimation.treeCharacter = new createjs.Sprite(n, "air");
		mmAnimation.treeCharacter.x = mmAnimation.posLeft *
			-1;
		mmAnimation.treeCharacter.y = 0;
		mmAnimation.bird2Character = new createjs.Sprite(e, "fly");
		mmAnimation.bird3Character = new createjs.Sprite(t, "fly");
		mmAnimation.bird3Character.x = -150;
		mmAnimation.bird2Character.x = -340;
		mmAnimation.stage.addChild(new createjs.Bitmap(mmAnimation.loader.getResult("fg")), mmAnimation.treeCharacter, mmAnimation.bird2Character, mmAnimation.bird3Character);
		mmAnimation.animateBird(mmAnimation.bird2Character, 1);
		mmAnimation.animateBird(mmAnimation.bird3Character, 3);
		createjs.Ticker.setFPS(24);
		createjs.Ticker.addEventListener("tick", mmAnimation.onTick)
	},
	handleCompleteDispositivo: function() {
		mmAnimation.treeCharacter = new createjs.Bitmap(mmAnimation.loader.getResult("tree"));
		mmAnimation.treeCharacter.x = mmAnimation.posLeft * -1;
		mmAnimation.treeCharacter.y = 0;
		mmAnimation.stage.addChild(new createjs.Bitmap(mmAnimation.loader.getResult("fg")), mmAnimation.treeCharacter);
		mmAnimation.stage.update()
	},
	onTick: function(e) {
		mmAnimation.stage.update()
	},
	generateRandom: function(e) {
		return Math.round(Math.random() *
			e)
	},
	animateBird: function(e, t) {
		e.visible = true;
		var n = 0;
		e.gotoAndPlay("fly");
		e.y = n;
		TweenMax.to(e, mmAnimation.generateRandom(10) + 30, {
			x: 4E3,
			y: n,
			delay: t,
			ease: Linear.easeNone,
			onComplete: function() {
				e.stop();
				mmAnimation.stage.removeChild(e);
				mmAnimation.removeAudio()
			}
		})
	},
	endAnimation: function() {
		TweenMax.killTweensOf(mmAnimation.bird1Character);
		TweenMax.killTweensOf(mmAnimation.bird2Character);
		TweenMax.killTweensOf(mmAnimation.bird3Character);
		TweenMax.killTweensOf(mmAnimation.treeCharacter);
		mmAnimation.removeAudio()
	},
	translateBg: function(e) {
		if (e == 0) {
			TweenMax.to($(".layer1"), 2, {
				css: {
					left: mmAnimation.posLeft
				},
				ease: Power4.easeOut
			});
			TweenMax.to($(".layer2"), 2, {
				css: {
					left: mmAnimation.posLeft
				},
				ease: Power4.easeOut
			});
			TweenMax.to($(".layer3"), 2, {
				css: {
					left: mmAnimation.posLeft
				},
				ease: Power4.easeOut
			});
			TweenMax.to($(".layer4"), 2, {
				css: {
					left: mmAnimation.posLeft
				},
				ease: Power4.easeOut
			})
		} else {
			TweenMax.to($(".layer1"), 2, {
				css: {
					left: mmAnimation.displacement(1.8)
				},
				ease: Power4.easeOut
			});
			TweenMax.to($(".layer2"), 2, {
				css: {
					left: mmAnimation.displacement(1.6)
				},
				ease: Power4.easeOut
			});
			TweenMax.to($(".layer3"), 2, {
				css: {
					left: mmAnimation.displacement(1.2)
				},
				ease: Power4.easeOut
			});
			TweenMax.to($(".layer4"), 2, {
				css: {
					left: mmAnimation.displacement(mmAnimation.dispRight)
				},
				ease: Power4.easeOut
			})
		}
	},
	displacement: function(e) {
		return Math.round((mmAnimation.imgw - mmAnimation.scw) / e * -1).toString() + "px"
	}
};
var xdata, currentContent, mediaModal, teachingNotes, cloudsAnimation, teachingNotes = "./sources/contents/pdf/teaching-notes.pdf";
$(document).ready(function() {
	$.getJSON("./models/" + externalDataId + ".json", function(e) {
		xdata = e;
		var t = getLocationHash();
		if (t == "") appGoto(xdata["init_page"]);
		else {
			if (t == "media-loaded") {
				var n = getCookieses("current_hash");
				setLocationHash(n)
			} else currentContent = resolveHash(t);
			window.onhashchange()
		}
	});
	DrawingApp.createTool(new DrawingToolType("pencil", "#000", 2, "painter"));
	DrawingApp.createTool(new DrawingToolType("marker", "rgba(0, 255, 150, 0.03)", 8, "painter"));
	DrawingApp.createTool(new DrawingToolType("eraser",
		"#000000", 36, "eraser"))
});
try {
	var str = window.location.hash;
	var _ar = new Array;
	_ar = str.split("/");
	if (_ar.length > 0) $("#maincontainer").addClass(_ar[0].substr(1))
} catch (e) {}
var objectLink = "";
if ($("#db-links").hasClass("drawing-tool-disabled") != true && $("#db-links").length != 0) {
	var string = user_data.get("objectLink");
	paintMarkers(string)
}
LinksWidget = {
	init: function() {
		$("#link-save-button").click(function() {
			return LinksWidget.save(), !1
		})
	},
	getNode: function() {
		return '<div id="links-container"><div id="links-inputs"><p><label class="name-link-label" for="link-name">Name</label><input id="link-name" class="text" type="text" name="name-link" required="required"></p><p><label for="url-link">Url</label><input id="link-url" class="text" type="text" name="url-link" value="' + window.location.href + '" required="required"></p></div><div class="clearfix"></div><div id="link-save-button-holder"><a id="link-save-button" class="btn btn-primary btn-shadow" href="#"><p>Save</p></a></div></div></div>'
	},
	save: function() {
		if ($("#link-name").val() == "" || $("#link-url").val() == "" || $("#link-url").val() == "http://");
		else {
			nameLink = $("#link-name").val();
			urlLink = $("#link-url").val();
			$("#page-content").append("<div class='marker-button' id='" + nameLink + "' data-link='" + urlLink + "' ><span class='marker-move' ><img src='sources/img/xpix.png' alt='marker'/></span><a href='#' class='marker-btn' data-link='" + urlLink + "'><img src='sources/img/xpix.png' alt='marker'/></a><a href='#' class='marker-delete' ><img src='sources/img/xpix.png' alt='marker'/></a></div>");
			$("#" + nameLink).css("top", "value");
			objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
			string += objectLink;
			user_data.put("objectLink", string);
			$(".marker-button#" + nameLink).draggable({
				cursor: "move",
				start: function(e, t) {
					nameLink = $(this).attr("id");
					urlLink = $(this).data("link");
					objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
					string =
						string.replace(objectLink, "")
				},
				stop: function(e, t) {
					objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
					string += objectLink;
					user_data.put("objectLink", string)
				}
			});
			$(".marker-delete").click(function(e, t) {
				nameLink = $(this).parent(".marker-button").attr("id");
				return menuController.hideColorBar(), menuController.utilModal = new Modal($("#rooftops-util-modal"), "util-modal"), menuController.utilModal.addContent({}, "delete"), !1
			});
			$(".marker-btn").click(function(e, t) {
				nameLink = $(this).parent(".marker-button").attr("id");
				urlLink = $(this).data("link");
				objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
				return menuController.hideColorBar(), menuController.utilModal = new Modal($("#rooftops-util-modal"), "util-modal"), menuController.utilModal.addContent({}, "open"), !1
			});
			$(".modal-btn-close").click()
		}
	}
}, DeleteWidget = {
	init: function() {
		$("#link-delete-button").click(function() {
			return DeleteWidget.deleted(), !1
		}), $("#link-noDelete-button").click(function() {
			return DeleteWidget.noDeleted(), !1
		})
	},
	getNode: function() {
		return '<div id="links-container"><div id="links-inputs"><p>Are you sure you want to delete this Web Link: </p><p class="pLink">' + urlLink + '</p></div><div class="clearfix"></div><div id="link-delete-button-holder"><a id="link-delete-button" class="btn btn-primary btn-shadow" href="#"><p>Yes</p></a><a id="link-noDelete-button" class="btn btn-primary btn-shadow" href="#"><p>No</p></a></div></div></div>'
	},
	deleted: function() {
		urlLink = $("#" + nameLink).data("link");
		objectLink = nameLink + "||" + urlLink + "||" + $(".marker-button#" + nameLink).position().left + "||" + $(".marker-button#" + nameLink).css("top") + "||*||";
		string = string.replace(objectLink, "");
		user_data.put("objectLink", string);
		$(".marker-button#" + nameLink).remove();
		$(".modal-btn-close").click()
	},
	noDeleted: function() {
		$(".modal-btn-close").click()
	}
}, OpenLinksWidget = {
	init: function() {
		$("#link-open-button").click(function() {
			return OpenLinksWidget.opened(), !1
		}), $("#link-noOpen-button").click(function() {
			return OpenLinksWidget.noOpened(), !1
		})
	},
	getNode: function() {
		return '<div id="links-container"><div id="links-inputs"><p>Are you sure you want to open this Web Link:</p><p class="pLink">' + urlLink + '</p></div><div class="clearfix"></div><div id="link-open-button-holder"><a id="link-open-button" class="btn btn-primary btn-shadow" href="#"><p>Yes</p></a><a id="link-noOpen-button" class="btn btn-primary btn-shadow" href="#"><p>No</p></a></div></div></div>'
	},
	opened: function() {
		window.location = "" + urlLink + "";
		$(".modal-btn-close").click()
	},
	noOpened: function() {
		$(".modal-btn-close").click()
	}
};


/*
Blink ;-)
 */
var _blink = window.parent.blink;
var _idbook = window.parent.idcurso;
var _bookJSON = null;

_blink.getCourse(_idbook).done(function(data) {
	// Guardar JSON para pintar dinamicamente menú!
	console.log(data);
	_bookJSON = data;
});

function openActivity(id) {
	_units = _bookJSON.units;
	for (var _unitID in _units) {
		if (_units.hasOwnProperty(_unitID)) {
			var _unit = _units[_unitID];
			var _activities = _unit.subunits;
			for (var _activityID in _activities) {
				if (_activities.hasOwnProperty(_activityID)) {
					var _activity = _activities[_activityID];
					if (_activity.id == id) {
						console.log(_activity);
						console.log('Activity found: should open iframe with src = ' + _activity.url);
						return true;
					}
				}
			}
		}
	}
	console.log('Activity NOT found');
	return false;
}